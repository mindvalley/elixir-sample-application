name: Elixir CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    name: Build and test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.14.2' # Define the elixir version [required]
        otp-version: '25.2' # Define the OTP version [required]
    - name: Restore dependencies cache
      uses: actions/cache@v2
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: mix deps.get

    - name: Compile
      run: mix compile

    - name: Run Sobelow and capture JSON file
      id: run-sobelow
      run: |
          mix sobelow --quiet --format json > sobelow.json
          echo "::set-output name=sobelow_json::$(cat sobelow.json)"
    - name: Check Sobelow findings and post comment
      if: steps.run-sobelow.outputs.sobelow_json != '{}'
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const sobelowJson = ${{ steps.run-sobelow.outputs.sobelow_json }};
          const totalFindings = sobelowJson.total_findings;
          const findings = sobelowJson.findings;  
          let body = 'Sobelow findings:\n\n';
          if (totalFindings > 0) {
            body += `Total Findings: ${totalFindings}\n\n`;
            body += 'High Confidence:\n';
            body += formatFindings(findings.high_confidence);
            body += '\n\n';
            body += 'Medium Confidence:\n';
            body += formatFindings(findings.medium_confidence);
            body += '\n\n';
            body += 'Low Confidence:\n';
            body += formatFindings(findings.low_confidence);
          } else {
            body += 'No Sobelow findings';
          } 
          const { data } = await github.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
            body: body,
          }); 
          function formatFindings(findingsArray) {
            let formatted = '';
            for (const finding of findingsArray) {
              formatted += `File: ${finding.file}\n`;
              formatted += `Line: ${finding.line}\n`;
              formatted += `Key: ${finding.key}\n\n`;
            }
            return formatted;
          }